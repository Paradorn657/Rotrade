import { NextResponse } from "next/server";
import { prisma } from "../../../../lib/prisma";

export async function POST(req: Request) {
  try {
    const requestData = await req.json();
    const { token, deals } = requestData;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ userId ‡∏à‡∏≤‡∏Å token ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á mt5account
    const account = await prisma.mt5Account.findUnique({
      where: { api_token: token },
    });

    if (!account) {
      return NextResponse.json({ message: "Invalid token" }, { status: 400 });
    }

    const userId = account.user_id;
    const mt5AccountId = account.MT5_accountid; // ‚úÖ ‡∏î‡∏∂‡∏á MT5_accountid
    console.log('‡∏™‡∏£‡πâ‡∏≤‡∏á bills ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user id:', userId, '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ MT5:', mt5AccountId);

    if (!deals || deals.length === 0) {
      return NextResponse.json({ message: "No trade history available" });
    }

    //‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ö‡∏¥‡∏•‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏£‡∏≠‡∏ö‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const unpaidBillsCount = await prisma.bills.count({
      where: {
        User_id: userId,
        status: "Unpaid",
        Bill_show:true
      }
    });

    // ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ 2 ‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡πÄ‡∏õ‡πá‡∏ô BAN
    if (unpaidBillsCount >= 2) {
      console.log(`üî¥ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡∏ñ‡∏π‡∏Å BAN ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô 2 ‡∏£‡∏≠‡∏ö‡∏ö‡∏¥‡∏•`);

      await prisma.user.update({
        where: { id: userId },
        data: { role: "BAN" }
      });

      //‡∏õ‡∏¥‡∏î‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡πÄ‡∏ó‡∏£‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏ñ‡πâ‡∏≤‡πÇ‡∏î‡∏ô‡πÅ‡∏ö‡∏ô

      await prisma.mt5Account.updateMany({
        where: { user_id: userId },
        data: { signal_status: "OFF" }
      });
    }





    // ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏´‡∏°‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏î‡∏µ‡∏•
    // ‡∏õ‡∏£‡∏±‡∏ö timestamp ‡∏à‡∏≤‡∏Å GMT+2 ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô UTC
    const timestamps = deals.map((deal: { time: number; }) => (deal.time * 1000) - (2 * 60 * 60 * 1000));
    const minDate = new Date(Math.min(...timestamps));
    const maxDate = new Date(Math.max(...timestamps));

    let currentStart = new Date(minDate);
    const bills = [];
    console.log('mindate:', minDate.toISOString(), "maxDate:", maxDate.toISOString());

    let lastBilledDate: Date | null = null; // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏ö‡∏¥‡∏•‡∏£‡∏≠‡∏ö‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    while (currentStart <= maxDate) {
      const currentEnd = new Date(currentStart);
      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ß‡∏•‡∏≤ 1 ‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö UTC
      // currentEnd.setUTCMinutes(currentEnd.getUTCMinutes() + 1);
      currentEnd.setUTCDate(currentEnd.getUTCDate() + 15);

      if (currentEnd > maxDate) {
        console.log('currentEnd > maxDate', maxDate.toISOString(), " - ", currentEnd.toISOString());
        break;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡πà‡∏ß‡∏á [currentStart, currentEnd] ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingBill = await prisma.bills.findFirst({
        where: {
          User_id: userId,
          MT5_accountid: mt5AccountId,
          Billing_startdate: { lt: currentEnd },
          Billing_enddate: { gt: currentStart },
        },
      });

      if (existingBill) {
        console.log(`‡∏û‡∏ö‡∏ö‡∏¥‡∏•‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á MT5 ${mt5AccountId} ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${currentStart.toISOString()} - ${currentEnd.toISOString()} ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ã‡πâ‡∏≥`);
      } else {
        const filteredDeals = deals.filter((deal: { time: number; }) => {
          // ‡∏õ‡∏£‡∏±‡∏ö timestamp ‡∏à‡∏≤‡∏Å GMT+2 ‡πÄ‡∏õ‡πá‡∏ô UTC ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
          const dealDate = new Date((deal.time * 1000) - (2 * 60 * 60 * 1000));
          return dealDate >= currentStart && dealDate <= currentEnd;
        });

        const totalProfit = filteredDeals.reduce((sum: any, deal: { profit: any; }) => sum + deal.profit, 0);
        const dealCount = filteredDeals.length;
        let BILLSHOW;

        if (totalProfit > 0) {
          console.log(`üü¢ ‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${currentStart.toISOString()} - ${currentEnd.toISOString()}`);
          BILLSHOW = true;
          const serviceFee = totalProfit * 0.1;
          const newBill = await prisma.bills.create({
            data: {
              User_id: userId,
              MT5_accountid: mt5AccountId,
              Billing_startdate: currentStart,
              Billing_enddate: currentEnd,
              Balance: serviceFee,
              status: "Unpaid",
              Deals_count: dealCount,
              Bill_show: BILLSHOW,
              dealsData: filteredDeals,
            },
          });
          bills.push({ bill: newBill, deals: filteredDeals });
        } else if (totalProfit < 0) {
          console.log(`üî¥ ‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${currentStart.toISOString()} - ${currentEnd.toISOString()}`);
          BILLSHOW = false;
          const serviceFee = 0;
          const newBill = await prisma.bills.create({
            data: {
              User_id: userId,
              MT5_accountid: mt5AccountId,
              Billing_startdate: currentStart,
              Billing_enddate: currentEnd,
              Balance: serviceFee,
              status: "Unpaid",
              Deals_count: dealCount,
              Bill_show: BILLSHOW,
              dealsData: filteredDeals,
            },
          });
          bills.push({ bill: newBill, deals: filteredDeals });
          lastBilledDate = currentEnd; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏ö‡∏¥‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        } else {
          console.log(`‚ö™ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≥‡πÑ‡∏£‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡∏≤‡∏î‡∏ó‡∏∏‡∏ô‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${currentStart.toISOString()} - ${currentEnd.toISOString()}`);
          // ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•
        }
      }
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï currentStart ‡πÄ‡∏õ‡πá‡∏ô currentEnd ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ä‡πà‡∏ß‡∏á‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
      currentStart = new Date(currentEnd);
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_billed ‡πÄ‡∏õ‡πá‡∏ô currentEnd ‡∏Ç‡∏≠‡∏á‡∏ö‡∏¥‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á
    if (lastBilledDate) {
      await prisma.mt5Account.update({
        where: { MT5_accountid: String(mt5AccountId), api_token: String(token) },
        data: { last_billed: lastBilledDate },
      });
      console.log(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_billed ‡∏Ç‡∏≠‡∏á MT5 ${mt5AccountId} ‡πÄ‡∏õ‡πá‡∏ô ${lastBilledDate.toISOString()}`);
    }


    return NextResponse.json({ message: "Bills created successfully", bills });
  } catch (error) {
    console.error("Error creating bills:", error);
    return NextResponse.json({ message: "Internal Server Error" }, { status: 500 });
  }
}
