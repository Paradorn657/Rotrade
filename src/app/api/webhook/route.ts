import Stripe from "stripe";
import { stripe } from "../../../../lib/stripe";
import { NextRequest, NextResponse } from "next/server";
import { prisma } from "../../../../lib/prisma";

export async function POST(req: NextRequest, res: NextResponse) {

    const body = await req.text();
    const signature = req.headers.get("Stripe-Signature") as string;

    let event: Stripe.Event;

    try {
        event = stripe.webhooks.constructEvent(
            body,
            signature,
            process.env.STRIPE_WEBHOOK_SECRET!);

    } catch (error) {
        return new NextResponse("invalid signature", { status: 400 })
    }
    if (event.type === "payment_intent.succeeded") {
        const paymentIntent = event.data.object as Stripe.PaymentIntent;
        console.log("‚úÖ Payment Success!");
        console.log(paymentIntent)
        console.log("üìß Customer name:", paymentIntent.metadata.customerName);
        console.log("üë§ User ID:", paymentIntent.metadata.userId);
        console.log("FOR MT5 ID:", paymentIntent.metadata.forMT5id);
        console.log("BIll ID:", paymentIntent.metadata.billid);


        const updatedBill = await prisma.bills.update({
            where: {
                Bill_id: Number(paymentIntent.metadata.billid),
                MT5_accountid: paymentIntent.metadata.forMT5id
            },
            data: {
                status: "Paid",
            }
        })

        const mtAccount = await prisma.mt5Account.findFirst({
            where: {
                user_id: Number(paymentIntent.metadata.userId),
                MT5_accountid: paymentIntent.metadata.forMT5id
            }
        });
        
        // ‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∂‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        if (mtAccount) {
            await prisma.mt5Account.update({
                where: {
                    MT5_id: mtAccount.MT5_id
                },
                data: {
                    last_billed: new Date()
                }
            });
            console.log(`üü¢ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï last_billed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MT5_id: ${mtAccount.MT5_id} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);
        } else {
            console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• mt5Account ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö user_id: ${paymentIntent.metadata.userId} ‡πÅ‡∏•‡∏∞ MT5_accountid: ${paymentIntent.metadata.forMT5id}`);
        }

        const userId = paymentIntent.metadata.userId;
        const unpaidBillsCount = await prisma.bills.count({
            where: {
                User_id: Number(userId),
                Bill_show: true, //‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ô‡∏±‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö‡∏ï‡∏±‡∏á‡∏Ñ‡πå
                status: "Unpaid"
            }
        });

        // ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ö‡∏¥‡∏• ‡πÅ‡∏•‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ role ‡πÄ‡∏õ‡πá‡∏ô "BAN" ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô
        if (unpaidBillsCount < 2) {
            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡πÅ‡∏ö‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            const user = await prisma.user.findUnique({
                where: { 
                    id: Number(userId) ,
                },
                select: { role: true }
            });

            if (user && user.role === "BAN") {
                console.log(`üü¢ ‡∏õ‡∏•‡∏î‡πÅ‡∏ö‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId} ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 2 ‡∏ö‡∏¥‡∏• (‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${unpaidBillsCount} ‡∏ö‡∏¥‡∏•)`);

                await prisma.user.update({
                    where: { id: Number(userId) },
                    data: { role: "user" } // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô role ‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô USER ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
                });
            }
        }


    }
    return new NextResponse("ok", { status: 200 })
}
